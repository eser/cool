import { isAlphanumeric } from "../checks/is-alphanumeric.ts";
import { isNumeric } from "../checks/is-numeric.ts";
import { isWhitespace } from "../checks/is-whitespace.ts";
import { type TokenDefinitions } from "./definition.ts";

export const extendedTokens: TokenDefinitions = {
  T_NEWLINE: ["T_NEWLINE", "\n"],
  T_COMMENT_MULTILINE_START: ["T_COMMENT_MULTILINE_START", "/*"],
  T_COMMENT_MULTILINE_END: ["T_COMMENT_MULTILINE_END", "*/"],
  T_COMMENT: ["T_COMMENT", "//"],
  T_ELLIPSIS: ["T_ELLIPSIS", "..."],
  T_DOT: ["T_DOT", "."],
  T_COMMA: ["T_COMMA", ","],
  T_COLON: ["T_COLON", ":"],
  T_SEMICOLON: ["T_SEMICOLON", ";"],
  T_OPEN_BRACKET: ["T_OPEN_BRACKET", "("],
  T_CLOSE_BRACKET: ["T_CLOSE_BRACKET", ")"],
  T_OPEN_SQUARE_BRACKET: ["T_OPEN_SQUARE_BRACKET", "["],
  T_CLOSE_SQUARE_BRACKET: ["T_CLOSE_SQUARE_BRACKET", "]"],
  T_OPEN_CURLY_BRACKET: ["T_OPEN_CURLY_BRACKET", "{"],
  T_CLOSE_CURLY_BRACKET: ["T_CLOSE_CURLY_BRACKET", "}"],
  T_DOUBLE_ARROW: ["T_DOUBLE_ARROW", "=>"],
  T_UNDERSCORE: ["T_UNDERSCORE", "_"],
  T_QUESTION_MARK: ["T_QUESTION_MARK", "?"],
  T_AT: ["T_AT", "@"],
  T_INCREMENT: ["T_INCREMENT", "++"],
  T_PLUS: ["T_PLUS", "+"],
  T_DECREMENT: ["T_DECREMENT", "--"],
  T_MINUS: ["T_MINUS", "-"],
  T_POWER: ["T_POWER", "**"],
  T_MULTIPLY: ["T_MULTIPLY", "*"],
  T_DIVIDE: ["T_DIVIDE", "/"],
  T_MOD: ["T_MOD", "%"],
  T_AND: ["T_AND", "&&"],
  T_BITWISE_AND: ["T_BITWISE_AND", "&"],
  T_OR: ["T_OR", "||"],
  T_BITWISE_OR: ["T_BITWISE_OR", "|"],
  T_NOT: ["T_NOT", "!"],
  T_BITWISE_NOT: ["T_BITWISE_NOT", "~"],
  T_XOR: ["T_XOR", "^^"],
  T_BITWISE_XOR: ["T_BITWISE_XOR", "^"],
  T_BITWISE_UNSIGNED_LEFT_SHIFT: ["T_BITWISE_UNSIGNED_LEFT_SHIFT", "<<<"],
  T_BITWISE_LEFT_SHIFT: ["T_BITWISE_LEFT_SHIFT", "<<"],
  T_IS_SMALLER_OR_EQUAL: ["T_IS_SMALLER_OR_EQUAL", "<="],
  T_IS_SMALLER: ["T_IS_SMALLER", "<"],
  T_BITWISE_UNSIGNED_RIGHT_SHIFT: ["T_BITWISE_UNSIGNED_RIGHT_SHIFT", ">>>"],
  T_BITWISE_RIGHT_SHIFT: ["T_BITWISE_RIGHT_SHIFT", ">>"],
  T_IS_GREATER_OR_EQUAL: ["T_IS_GREATER_OR_EQUAL", ">="],
  T_IS_GREATER: ["T_IS_GREATER", ">"],
  T_IS_NOT_IDENTICAL: ["T_IS_NOT_IDENTICAL", "!=="],
  T_IS_NOT_EQUAL: ["T_IS_NOT_EQUAL", "!="],
  T_IS_IDENTICAL: ["T_IS_IDENTICAL", "==="],
  T_IS_EQUAL: ["T_IS_EQUAL", "=="],
  T_EQUAL: ["T_EQUAL", "="],
  T_BACKSLASH: ["T_BACKSLASH", "\\"],
  T_DOUBLE_QUOTE: ["T_DOUBLE_QUOTE", '"'],
  T_QUOTE: ["T_QUOTE", "'"],
  T_BACKTICK: ["T_BACKTICK", "`"],
  T_DOLLAR_SIGN: ["T_DOLLAR_SIGN", "$"],
  T_WHITESPACE: ["T_WHITESPACE", isWhitespace],
  T_NUMERIC: ["T_NUMERIC", isNumeric],
  T_ALPHANUMERIC: ["T_ALPHANUMERIC", isAlphanumeric],
  T_UNKNOWN: ["T_UNKNOWN", ""],
  T_END: ["T_END", ""],
};
